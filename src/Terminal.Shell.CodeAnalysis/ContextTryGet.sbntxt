//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#if !TSH_NoContextExtensions

namespace Terminal.Shell;

static partial class ContextExtensions
{
    public static partial bool TryGet<T>(this IContext context, string name, out T value)
    {
        value = default!;
        var values = context.Get(name);
        if (values == null)
            return false;

        var type = typeof(T);
        
        bool TryGetValue<TValue>(string name, out TValue result)
        {
            result = default!;
            var type = typeof(TValue);
            var kind = Type.GetTypeCode(type);
            if (values!.TryGetValue(name, out var value))
            {
                result = (TValue)value!;
                return true;
            }

            // If values can be null, assume missing == null and succeeed
            if (kind == TypeCode.Object || kind == TypeCode.String)
                return true;

            if (type.IsValueType && type.IsGenericType &&
                type.GetGenericTypeDefinition() == typeof(Nullable<>))
                return true;

            // Otherwise, we must fail.
            return false;
        }

        switch (type)
        {
            {{~ for type in Types ~}}
            case Type when type == typeof({{ type.Type }}):
                {
                    if ({{~ for value in type.Values ~}}TryGetValue<{{ value.Type }}>("{{ value.Name }}", out var {{ value.Name }}) && 
                        {{ end ~}} true)
                    {
                        value = (T)(object)new {{ type.Type }}({{ type.Arguments | array.each @(do; ret $0.Name; end) | array.join ', ' }})
                        {{~ if (type.Properties | array.size) > 0 ~}}
                        {
                            {{~ for prop in type.Properties ~}}
                            {{ prop.Name }} = {{ prop.Name }},
                            {{~ end ~}}
                        }
                        {{~ end ~}};
                        return true;
                    }
                    return false;
                }
            {{~ end ~}}
            default:
                return false;
        }
    }
}

#endif