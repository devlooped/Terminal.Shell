using System.Diagnostics;
using System.Text;
using Microsoft.CodeAnalysis;

namespace Terminal.Shell.CodeAnalysis;

[Generator(LanguageNames.CSharp)]
public class EmbeddedResourceGenerator : IIncrementalGenerator
{
    record ResourceMetadata(string Name, string Namespace, string ResourceName);

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var resourceTexts = context.AdditionalTextsProvider
            .Where(x => x.Path.EndsWith(".resx", StringComparison.OrdinalIgnoreCase))
            .Collect();

        var options = context.AnalyzerConfigOptionsProvider
            .Combine(resourceTexts)
            .SelectMany((pair, _) => pair.Right.Select(txt => new
            {
                AdditionalText = txt,
                AnalyzerOptions = pair.Left.GetOptions(txt)
            }));

        var embedded = options.Where(pair =>
            pair.AnalyzerOptions.TryGetValue("build_metadata.AdditionalFiles.SourceItemType", out var itemType)
            && itemType == "EmbeddedResource");

        var withMetadata = embedded.Select((pair, _) => new
        {
            pair.AdditionalText,
            Metadata = new
            {
                ManifestResourceName = pair.AnalyzerOptions.TryGetValue("build_metadata.EmbeddedResource.ManifestResourceName", out var name) ? name : null,
                Culture = pair.AnalyzerOptions.TryGetValue("build_metadata.EmbeddedResource.Culture", out var culture) ? culture : ""
            }
        }).Where(x => x.Metadata.ManifestResourceName != null);

        var withModel = withMetadata.Select((x, _) => new
        {
            x.Metadata.Culture,
            ResourceName = string.IsNullOrEmpty(x.Metadata.Culture) ?
                x.Metadata.ManifestResourceName! :
                x.Metadata.ManifestResourceName!.Replace("." + x.Metadata.Culture, ""),
        }).Select((x, _) => new
        {
            x.Culture,
            Key = new ResourceMetadata(
                x.ResourceName.Split('.')[^1],
                string.Join(".", x.ResourceName.Split('.')[..^1]),
                x.ResourceName)
        });

        context.RegisterImplementationSourceOutput(
            withModel.Collect().SelectMany((x, _) => x.GroupBy(d => d.Key)),
            (ctx, data) =>
            {
                var builder = new StringBuilder().AppendLine(
                  $$"""
                    // <auto-generated />
                    using System.Composition;
                    using System.Resources;

                    namespace {{data.Key.Namespace}};

                    [Shared]
                    public class {{data.Key.Name}}Provider
                    {
                        [Export]
                    """);

                foreach (var item in data)
                {
                    builder.AppendLine(
                        $"""
                             [ExportMetadata("Culture", "{item.Culture}")]
                         """);

                }

                builder.AppendLine(
                  $$"""
                        public ResourceManager ResourceManager { get; } = new ResourceManager("{{data.Key.ResourceName}}", typeof({{data.Key.Name}}Provider).Assembly);
                    }
                    """);

                ctx.AddSource($"{data.Key.Name}Provider.g", builder.ToString());
            });
    }
}
